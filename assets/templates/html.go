// Code generated by go-bindata.
// sources:
// templates/html/common_footer.html
// templates/html/common_header.html
// templates/html/confirm.html
// templates/html/confirm_update.html
// templates/html/email_confirmation.html
// templates/html/index.html
// templates/html/subscribe.html
// templates/html/subscribe_confirm.html
// templates/html/success.html
// templates/html/unsubscribe.html
// templates/html/unsubscribe_confirm.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlCommon_footerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\xcd\xcd\xcf\x8b\x4f\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x69\xd6\xfd\xcd\x34\x00\x00\x00")

func templatesHtmlCommon_footerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlCommon_footerHtml,
		"templates/html/common_footer.html",
	)
}

func templatesHtmlCommon_footerHtml() (*asset, error) {
	bytes, err := templatesHtmlCommon_footerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/common_footer.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1560917220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlCommon_headerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xb1\x4e\xc4\x30\x10\x44\xeb\xe4\x2b\x8c\x6b\xac\x88\x8e\xc2\x4e\x03\xd4\x50\xd0\x50\x21\x9f\x3d\x87\x57\xb2\xd7\x21\xd9\xe4\x40\x51\xfe\x1d\x41\x40\x1c\x54\xa3\xd5\xce\x7b\xd2\xac\x6b\xc4\x91\x18\x4a\x87\x5a\x4a\xe5\xe7\x04\x1f\x31\xea\x6d\xb3\x17\xb7\xf7\x37\x8f\x4f\x0f\x77\x2a\x49\xc9\x7d\x6b\xf7\x68\xec\x67\xa3\x6f\x9b\xc6\x16\x88\x57\x21\xf9\x71\x82\x38\x3d\xcb\xd1\x5c\x6b\xd5\xfd\xbe\x92\xc8\x60\xf0\x3a\xd3\xe2\xf4\x9b\x99\xbd\x09\xb5\x0c\x5e\xe8\x90\xa1\x55\xa8\x2c\x60\x71\x9a\xe0\x10\x5f\xf0\x87\x64\x5f\xe0\xf4\x42\x38\x0d\x75\x94\xb3\xf2\x89\xa2\x24\x17\xb1\x50\x80\xf9\x3a\x2e\x15\x31\x09\xf9\x6c\xa6\xe0\x33\xdc\xd5\x8f\x48\x48\x32\x7a\xdb\xed\xf9\x4f\x1d\x31\x85\x91\x06\xa1\xca\x67\xf6\x1d\xb5\xdd\xf7\x42\x7b\xa8\xf1\xbd\x6f\xd7\x15\x1c\xb7\xad\xfd\x08\x00\x00\xff\xff\x28\x5c\xc1\x8a\x2b\x01\x00\x00")

func templatesHtmlCommon_headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlCommon_headerHtml,
		"templates/html/common_header.html",
	)
}

func templatesHtmlCommon_headerHtml() (*asset, error) {
	bytes, err := templatesHtmlCommon_headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/common_header.html", size: 299, mode: os.FileMode(420), modTime: time.Unix(1560917190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlConfirmHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x4b\xcb\x2c\xca\x55\xaa\xad\xe5\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x01\x0b\xe7\xe6\xe6\xe7\xc5\x67\xa4\x26\xa6\xa4\x16\xe1\x90\x4c\xcb\xcf\x2f\x81\x49\x2a\xa4\xe6\xa5\x28\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x69\x90\xa5\x70\x5a\x00\x00\x00")

func templatesHtmlConfirmHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlConfirmHtml,
		"templates/html/confirm.html",
	)
}

func templatesHtmlConfirmHtml() (*asset, error) {
	bytes, err := templatesHtmlConfirmHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/confirm.html", size: 90, mode: os.FileMode(420), modTime: time.Unix(1560917555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlConfirm_updateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xc9\x31\x0a\x80\x30\x0c\x05\xd0\xbd\xa7\x08\xbd\x58\x29\xe6\x17\x0b\x26\x29\x25\x4e\x21\x77\x17\x04\x47\xe7\x17\x41\x8c\x31\x15\x54\x0f\xd3\x31\xb7\xb4\x7b\x71\x77\xd4\xcc\x12\xe1\x90\x75\x75\x7f\x55\xc4\xb4\x9d\xe8\x8c\xfd\x83\xc3\xcc\x3f\x24\x28\x53\x66\x79\x02\x00\x00\xff\xff\x82\xf5\x03\x9a\x61\x00\x00\x00")

func templatesHtmlConfirm_updateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlConfirm_updateHtml,
		"templates/html/confirm_update.html",
	)
}

func templatesHtmlConfirm_updateHtml() (*asset, error) {
	bytes, err := templatesHtmlConfirm_updateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/confirm_update.html", size: 97, mode: os.FileMode(420), modTime: time.Unix(1567952396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlEmail_confirmationHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcd\x4d\xcc\xcc\x89\x4f\xce\xcf\x4b\xcb\x2c\xca\x4d\x2c\xc9\xcc\xcf\x53\x52\xa8\xad\xe5\xe2\xb2\x49\x54\xc8\x28\x4a\x4d\xb3\x55\x52\x56\xb2\xab\xae\x56\xd0\x73\xce\x4f\x49\x55\xa8\xad\xb5\xd1\x4f\xb4\xe3\xe2\xaa\xae\x56\x48\xcd\x4b\x01\xa9\x03\x04\x00\x00\xff\xff\x8d\x96\x16\x1b\x4a\x00\x00\x00")

func templatesHtmlEmail_confirmationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlEmail_confirmationHtml,
		"templates/html/email_confirmation.html",
	)
}

func templatesHtmlEmail_confirmationHtml() (*asset, error) {
	bytes, err := templatesHtmlEmail_confirmationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/email_confirmation.html", size: 74, mode: os.FileMode(420), modTime: time.Unix(1567952259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xc9\x31\x0a\x80\x30\x0c\x05\xd0\xbd\xa7\xf8\xf4\x62\x52\xcc\x2f\x16\x4c\x22\x92\x41\x08\xb9\xbb\x93\xa3\xf3\xcb\x84\x70\x2e\x23\xfa\x32\xe1\xd3\xab\x5a\x66\x50\xaf\x73\x04\xd1\x77\x57\x75\xdb\x0e\x0e\xe1\xfd\x83\xd3\x3d\x3e\x04\x4d\x50\xd5\xde\x00\x00\x00\xff\xff\xfa\xa8\xe7\xef\x58\x00\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 88, mode: os.FileMode(420), modTime: time.Unix(1560917308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSubscribeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6a\x34\x21\x10\x46\xf7\x9e\xa2\xa8\x03\xfc\x7d\x01\x75\xf7\xef\x02\x09\x99\x64\x1d\xec\xb6\x3a\x2d\xb4\x55\xa2\x25\x64\x10\xef\x1e\x86\x19\x42\x16\x59\x16\xef\x41\x7d\x6f\x0c\x88\xb4\x27\x26\xc0\xd6\xd7\xb6\xd5\xb4\x12\xce\x69\xc6\x50\xca\xe5\x0c\x4a\x80\x9b\xe4\x2c\xfc\x71\x50\x88\x54\x6f\xd0\xd8\x5d\x6a\x86\x4c\x7a\x48\x74\xf8\xf2\x7c\x79\x43\x08\x9b\x26\x61\x87\x63\xc0\xbf\xf7\xd7\x27\x98\x13\xbd\xb1\x89\x4b\x57\xd0\x6b\x21\x87\x4a\x5f\x8a\xc0\x21\x93\xc3\x10\x63\xa5\xd6\x10\x52\xfc\x75\x94\x33\x6c\x74\xc8\x19\xa9\x3a\xfc\xcf\x4a\x15\xae\xd2\x2b\x50\x0e\xe9\x84\x87\x06\x3f\xfa\xe2\x8d\x5d\xbb\xaa\xf0\xe3\x43\xeb\x6b\x4e\x8a\xfe\x92\x3e\x19\x7a\xb1\xcb\x9d\x7a\x63\x97\xdb\x62\x6f\xfe\xea\xda\x45\xf4\xde\x35\x06\x10\x47\x98\xd3\x7c\x07\x00\x00\xff\xff\x50\xaa\x5c\x01\x17\x01\x00\x00")

func templatesHtmlSubscribeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSubscribeHtml,
		"templates/html/subscribe.html",
	)
}

func templatesHtmlSubscribeHtml() (*asset, error) {
	bytes, err := templatesHtmlSubscribeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/subscribe.html", size: 279, mode: os.FileMode(420), modTime: time.Unix(1568292581, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSubscribe_confirmHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\x31\x0e\xc2\x30\x0c\x46\xe1\x3d\xa7\xb0\xba\xb0\xc1\x05\xaa\x5e\x83\xb1\x4a\x93\x3f\x22\x52\x6d\x47\x89\x61\xb1\x72\x77\x84\x58\x18\x98\x9f\xde\xe7\x4e\x19\xa5\x0a\x68\x19\xcf\x63\xa4\x5e\x0f\xec\x49\xa5\xd4\xce\xd1\xaa\xca\x32\x67\x70\x37\x70\x3b\xa3\x81\x96\xa4\xcc\x2a\xfb\x03\x31\xa3\x7f\x62\x58\xdb\x76\xc7\xe5\x05\x1a\x10\xa3\x48\xbf\x37\x81\x63\x3d\xaf\xeb\xad\x6d\xe1\x1f\x53\x54\xed\xcb\xb8\x13\x24\xd3\x9c\xe1\x1d\x00\x00\xff\xff\xd3\xb5\x2d\xd4\x93\x00\x00\x00")

func templatesHtmlSubscribe_confirmHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSubscribe_confirmHtml,
		"templates/html/subscribe_confirm.html",
	)
}

func templatesHtmlSubscribe_confirmHtml() (*asset, error) {
	bytes, err := templatesHtmlSubscribe_confirmHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/subscribe_confirm.html", size: 147, mode: os.FileMode(420), modTime: time.Unix(1567952005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSuccessHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xc9\x31\x0a\xc0\x20\x0c\x05\xd0\xdd\x53\x04\x2f\x26\xa2\x5f\x2a\x34\x49\xd1\x74\x0a\xb9\x7b\xa1\xd0\xb1\xf3\x73\xa7\x8e\x31\x05\x94\x9b\xca\x98\x8b\xcb\xbe\x5b\xc3\xde\x39\x22\xb9\x1b\xf8\x3a\xab\xbd\xcc\xac\x52\x0e\xd4\x8e\xf5\x83\x43\xd5\x3e\x24\x48\xa7\x88\xf4\x04\x00\x00\xff\xff\xe9\xd5\x22\x89\x62\x00\x00\x00")

func templatesHtmlSuccessHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSuccessHtml,
		"templates/html/success.html",
	)
}

func templatesHtmlSuccessHtml() (*asset, error) {
	bytes, err := templatesHtmlSuccessHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/success.html", size: 98, mode: os.FileMode(420), modTime: time.Unix(1560917570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlUnsubscribeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6a\xc4\x30\x0c\x45\xf7\x3e\x85\xd0\x01\x9a\x0b\x38\xde\x75\x57\x68\xe9\xb4\xeb\xe2\xc4\x4a\x63\x88\x25\x63\xcb\xd0\x60\x7c\xf7\x32\xcc\x50\xba\x98\xa5\x78\x0f\xf4\x5f\xef\x10\x68\x8b\x4c\x80\x8d\x6b\x5b\xea\x5a\xe2\x42\x38\x86\xe9\x5d\x29\xe5\xc3\x2b\x01\xae\x92\x92\xf0\xd7\x4e\x3e\x50\xb9\x42\x63\x17\x09\xa7\x33\x76\x93\x92\x20\x91\xee\x12\x66\x7c\x7b\xbd\x7c\x20\xf8\x55\xa3\xf0\x8c\xbd\xc3\xd3\xe7\xfb\x0b\x8c\x81\xce\xd8\xc8\xb9\x29\xe8\x99\x69\x46\xa5\x1f\x45\x60\x9f\x68\x46\x1f\x42\xa1\x5a\x11\x62\xf8\x77\xe4\xc3\xaf\xb4\xcb\x11\xa8\xcc\xf8\xcc\x4a\x05\x4e\x69\x05\x28\xf9\x78\xc0\x5d\x83\x3f\x7d\x72\xc6\x2e\x4d\x55\xf8\xfe\xa1\xb6\x25\x45\x45\x77\x89\xdf\x0c\x2d\xdb\xe9\x46\x9d\xb1\xd3\x75\xb1\x33\x8f\xf2\x36\x11\xbd\xe5\xf5\x0e\xc4\x01\xc6\x30\xbf\x01\x00\x00\xff\xff\x1f\x63\x7d\x95\x20\x01\x00\x00")

func templatesHtmlUnsubscribeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlUnsubscribeHtml,
		"templates/html/unsubscribe.html",
	)
}

func templatesHtmlUnsubscribeHtml() (*asset, error) {
	bytes, err := templatesHtmlUnsubscribeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/unsubscribe.html", size: 288, mode: os.FileMode(420), modTime: time.Unix(1567952174, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlUnsubscribe_confirmHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\x31\x0e\xc3\x20\x0c\x46\xe1\x9d\x53\x58\x2c\xdd\xda\x0b\x44\xb9\x46\xc7\x88\xc0\x8f\x8a\x14\x6c\x04\x4e\x17\x8b\xbb\x57\x55\x97\x0e\x99\x9f\xde\x67\x46\x09\xb9\x30\xc8\x9f\x3c\xce\x7d\xc4\x5e\x76\x6c\x51\x38\x97\x5e\x83\x16\x61\x3f\xa7\x33\x53\xd4\x76\x04\x05\xf9\x28\xb5\x0a\x6f\x2f\x84\x84\xfe\x8d\x6e\x69\xeb\x13\xb7\x37\x68\x80\x95\x02\xfd\xdf\x84\x1a\xca\x71\x5f\x1e\x6d\x75\x57\x4c\x16\xd1\x1f\x63\x46\xe0\x44\x73\xba\x4f\x00\x00\x00\xff\xff\xb3\x49\xe6\xb3\x95\x00\x00\x00")

func templatesHtmlUnsubscribe_confirmHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlUnsubscribe_confirmHtml,
		"templates/html/unsubscribe_confirm.html",
	)
}

func templatesHtmlUnsubscribe_confirmHtml() (*asset, error) {
	bytes, err := templatesHtmlUnsubscribe_confirmHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/unsubscribe_confirm.html", size: 149, mode: os.FileMode(420), modTime: time.Unix(1567952223, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/common_footer.html":       templatesHtmlCommon_footerHtml,
	"templates/html/common_header.html":       templatesHtmlCommon_headerHtml,
	"templates/html/confirm.html":             templatesHtmlConfirmHtml,
	"templates/html/confirm_update.html":      templatesHtmlConfirm_updateHtml,
	"templates/html/email_confirmation.html":  templatesHtmlEmail_confirmationHtml,
	"templates/html/index.html":               templatesHtmlIndexHtml,
	"templates/html/subscribe.html":           templatesHtmlSubscribeHtml,
	"templates/html/subscribe_confirm.html":   templatesHtmlSubscribe_confirmHtml,
	"templates/html/success.html":             templatesHtmlSuccessHtml,
	"templates/html/unsubscribe.html":         templatesHtmlUnsubscribeHtml,
	"templates/html/unsubscribe_confirm.html": templatesHtmlUnsubscribe_confirmHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"common_footer.html":       &bintree{templatesHtmlCommon_footerHtml, map[string]*bintree{}},
			"common_header.html":       &bintree{templatesHtmlCommon_headerHtml, map[string]*bintree{}},
			"confirm.html":             &bintree{templatesHtmlConfirmHtml, map[string]*bintree{}},
			"confirm_update.html":      &bintree{templatesHtmlConfirm_updateHtml, map[string]*bintree{}},
			"email_confirmation.html":  &bintree{templatesHtmlEmail_confirmationHtml, map[string]*bintree{}},
			"index.html":               &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
			"subscribe.html":           &bintree{templatesHtmlSubscribeHtml, map[string]*bintree{}},
			"subscribe_confirm.html":   &bintree{templatesHtmlSubscribe_confirmHtml, map[string]*bintree{}},
			"success.html":             &bintree{templatesHtmlSuccessHtml, map[string]*bintree{}},
			"unsubscribe.html":         &bintree{templatesHtmlUnsubscribeHtml, map[string]*bintree{}},
			"unsubscribe_confirm.html": &bintree{templatesHtmlUnsubscribe_confirmHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// templates/html/common_footer.html
// templates/html/common_header.html
// templates/html/confirm.html
// templates/html/confirm_update.html
// templates/html/email_confirmation.html
// templates/html/index.html
// templates/html/subscribe.html
// templates/html/subscribe_confirm.html
// templates/html/success.html
// templates/html/unsubscribe.html
// templates/html/unsubscribe_confirm.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlCommon_footerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\xcd\xcd\xcf\x8b\x4f\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\xe2\xe4\xb4\xd1\x4f\xc9\x2c\xb3\xe3\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x51\x34\x73\xde\x3d\x00\x00\x00")

func templatesHtmlCommon_footerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlCommon_footerHtml,
		"templates/html/common_footer.html",
	)
}

func templatesHtmlCommon_footerHtml() (*asset, error) {
	bytes, err := templatesHtmlCommon_footerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/common_footer.html", size: 61, mode: os.FileMode(420), modTime: time.Unix(1568293556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlCommon_headerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x31\x6f\xe3\x30\x0c\x85\x67\xfb\x57\xe8\x78\xeb\x09\xc6\x6d\x37\x48\x5e\xae\x5d\xdb\x0e\x5d\x3a\x15\xb4\xc4\xc4\x04\x6c\xca\x95\x19\x27\x85\xe1\xff\x5e\x24\x76\xdb\xa4\xd3\x93\xa8\xf7\xbe\x27\xce\x73\xa4\x1d\x0b\x19\x08\xa9\xef\x93\xbc\xb6\x84\x91\x32\x2c\x8b\xfb\x75\xf7\xf8\xff\xf9\xe5\xe9\xde\xb4\xda\x77\x75\xe9\x56\x29\xdc\xd9\x51\x97\x45\xe1\x7a\x52\x34\xa1\xc5\x3c\x92\x7a\x38\xe8\xce\xfe\x03\x53\x7d\x3f\xb5\xaa\x83\xa5\xb7\x03\x4f\x1e\x4e\xf6\x80\x36\xa4\x7e\x40\xe5\xa6\x23\x30\x21\x89\x92\xa8\x07\x26\x4f\x71\x4f\x37\x49\xc1\x9e\x3c\x4c\x4c\xc7\x21\x65\xbd\x32\x1f\x39\x6a\xeb\x23\x4d\x1c\xc8\x5e\x2e\x7f\x0c\x0b\x2b\x63\x67\xc7\x80\x1d\xf9\xbf\x9f\x20\x65\xed\xa8\x76\xd5\xaa\x3f\xd0\x91\xc6\x90\x79\x50\x4e\x72\x45\x5f\xa3\xae\xda\x36\x74\x4d\x8a\xef\x75\x59\x16\xc6\x18\xe3\x04\x27\x13\x3a\x1c\x47\x0f\x82\x53\x83\xd9\xac\x62\xe9\x34\xa0\x44\xdb\xed\xe1\xd2\x82\xb7\x2e\xdb\x64\x94\x08\xa6\xcd\xb4\xf3\xf0\x1b\xea\x87\xcb\xd8\x55\x58\x6f\xe0\x4a\x70\xda\xce\xdb\x24\xf2\x57\xd5\xf9\x6f\xc8\x42\x19\xea\x72\x9e\x49\xe2\xb2\x94\x1f\x01\x00\x00\xff\xff\x70\x5d\xaf\xec\xb4\x01\x00\x00")

func templatesHtmlCommon_headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlCommon_headerHtml,
		"templates/html/common_header.html",
	)
}

func templatesHtmlCommon_headerHtml() (*asset, error) {
	bytes, err := templatesHtmlCommon_headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/common_header.html", size: 436, mode: os.FileMode(420), modTime: time.Unix(1568294163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlConfirmHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x4b\xcb\x2c\xca\x55\xaa\xad\xe5\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x01\x0b\xe7\xe6\xe6\xe7\xc5\x67\xa4\x26\xa6\xa4\x16\xe1\x90\x4c\xcb\xcf\x2f\x81\x49\x2a\xa4\xe6\xa5\x28\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x69\x90\xa5\x70\x5a\x00\x00\x00")

func templatesHtmlConfirmHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlConfirmHtml,
		"templates/html/confirm.html",
	)
}

func templatesHtmlConfirmHtml() (*asset, error) {
	bytes, err := templatesHtmlConfirmHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/confirm.html", size: 90, mode: os.FileMode(420), modTime: time.Unix(1560917555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlConfirm_updateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xc9\x31\x0a\x80\x30\x0c\x05\xd0\xbd\xa7\x08\xbd\x58\x29\xe6\x17\x0b\x26\x29\x25\x4e\x21\x77\x17\x04\x47\xe7\x17\x41\x8c\x31\x15\x54\x0f\xd3\x31\xb7\xb4\x7b\x71\x77\xd4\xcc\x12\xe1\x90\x75\x75\x7f\x55\xc4\xb4\x9d\xe8\x8c\xfd\x83\xc3\xcc\x3f\x24\x28\x53\x66\x79\x02\x00\x00\xff\xff\x82\xf5\x03\x9a\x61\x00\x00\x00")

func templatesHtmlConfirm_updateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlConfirm_updateHtml,
		"templates/html/confirm_update.html",
	)
}

func templatesHtmlConfirm_updateHtml() (*asset, error) {
	bytes, err := templatesHtmlConfirm_updateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/confirm_update.html", size: 97, mode: os.FileMode(420), modTime: time.Unix(1567952396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlEmail_confirmationHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcd\x4d\xcc\xcc\x89\x4f\xce\xcf\x4b\xcb\x2c\xca\x4d\x2c\xc9\xcc\xcf\x53\x52\xa8\xad\xe5\xe2\xb2\x49\x54\xc8\x28\x4a\x4d\xb3\x55\x52\x56\xb2\xab\xae\x56\xd0\x73\xce\x4f\x49\x55\xa8\xad\xb5\xd1\x4f\xb4\xe3\xe2\xaa\xae\x56\x48\xcd\x4b\x01\xa9\x03\x04\x00\x00\xff\xff\x8d\x96\x16\x1b\x4a\x00\x00\x00")

func templatesHtmlEmail_confirmationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlEmail_confirmationHtml,
		"templates/html/email_confirmation.html",
	)
}

func templatesHtmlEmail_confirmationHtml() (*asset, error) {
	bytes, err := templatesHtmlEmail_confirmationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/email_confirmation.html", size: 74, mode: os.FileMode(420), modTime: time.Unix(1567952259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x5d\xaa\xc2\x30\x10\x46\xdf\xb3\x8a\x8f\x2c\xa0\xdd\xc0\xdc\xac\xe1\x82\xf8\x2c\x69\x33\xa5\x81\xfc\x48\x92\x82\x30\x64\xef\xd2\x22\xa2\x28\xbe\xcd\xc7\x70\x0e\x47\x04\x8e\x17\x9f\x18\xda\x27\xc7\x37\x8d\xde\x95\x08\x1a\xc7\x6b\xb0\x8d\xa1\xe7\x1c\x63\x4e\x97\x95\xad\xe3\x72\xbc\x15\x6d\xc1\x28\x05\x00\x14\xbc\x21\x8b\xb5\xf0\xf2\xa7\x45\x30\xfc\xdb\xb6\xd6\xe1\xb4\x4d\x75\x2e\x7e\x62\xf4\xae\xcd\x73\xd1\x68\x0d\x8d\xc1\x9b\x1d\xfd\xc5\x9f\x53\x7d\x33\xbc\xec\x4f\x87\xa2\xf1\xe8\xf9\x56\xbd\xe4\xdc\x1e\xd5\x22\xe0\xe4\xf6\xeb\x1e\x00\x00\xff\xff\x98\xed\x81\x03\xf4\x00\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 244, mode: os.FileMode(420), modTime: time.Unix(1568293427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSubscribeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\x4d\x6f\x9c\x3c\x10\xc7\xcf\xf0\x29\x46\xbe\xe4\xc4\x22\xe5\x6c\x7c\x8b\xf4\x3c\x52\xa5\x46\x4d\xa3\xaa\xa7\xca\xe0\x61\xb1\xea\x17\x34\x1e\xb6\x45\x68\xbf\x7b\x65\x16\xb2\xa4\xcd\x05\x99\x79\xf9\xcd\xdf\xf6\xdf\xcb\x02\x06\x7b\x1b\x10\x44\x9a\xda\xd4\x91\x6d\x51\x5c\xaf\xe5\xb2\x30\xfa\xd1\x69\x46\x10\x5d\xf4\x3e\x86\x1f\x03\x6a\x83\x94\x93\xa5\x34\xf6\x02\x9d\xd3\x29\x35\xa2\xd3\x64\x84\x2a\x01\x00\xe4\xf0\x78\x8c\x56\x5b\x87\x7a\xd9\xc9\xb2\x1e\x1e\xb7\xd2\xbf\x08\x55\x1b\xcd\x2c\x54\x59\x16\xcb\x02\xb6\x87\xd3\x13\x51\x24\xc8\xc3\x8a\x63\xad\x76\x48\x0c\xeb\xb7\x32\x3a\x9c\x91\x04\x50\x74\xb8\x65\x84\x2a\x8b\x8c\x5f\x96\x03\xa1\x90\xb5\xb1\x17\xb5\xa2\x31\x98\x35\x54\x16\xb2\x8f\xe4\x77\x6c\x5e\x0b\xf0\xc8\x43\x34\x8d\x78\xfe\xfc\xf2\x55\x80\xee\xd8\xc6\xd0\x88\xcc\x7a\xfd\xf2\x09\xae\xd7\x9d\xfe\x5e\x52\xee\xad\xce\x14\xa7\x71\xcf\x4b\xa7\x5b\x74\xd0\x47\x6a\x84\x36\x86\x30\x25\xa1\x9e\xbc\xb6\x0e\xb6\x5f\x59\xaf\x25\x7b\xbd\x0d\xe3\xc4\xc0\xf3\x88\x8d\xc0\x5c\x27\xde\xc1\xbb\x18\x98\xa2\x13\x60\xcd\x1d\x08\x9a\xac\xae\x0c\xde\x4e\xd6\xb4\xf3\xd6\xfa\x1f\xba\x51\xc0\xe8\x74\x87\x43\x74\x06\xa9\x11\xdf\xe3\x44\x80\xc7\xf9\x6f\x4a\x93\xd7\xce\xad\xdc\x43\xf3\x71\x36\xe3\x6f\x86\xfc\xa9\xfc\xc4\x68\x84\xfa\x86\x0f\xce\x41\xc0\x0b\x12\xa4\x41\x13\xc2\x7c\xc7\xff\xb2\x3c\x80\x0e\x73\x0c\x08\xe8\x12\x9e\x64\xbd\x4e\x50\xf7\x4b\x28\x0b\xd9\x4e\xcc\x31\x6c\xfb\x4d\x53\xeb\x2d\xbf\x0d\x6d\x39\x40\xcb\xa1\x1a\xc9\x7a\x4d\xf3\x6a\x1e\x6f\x59\xd6\xb7\xa6\x1b\xa0\xce\xd2\x36\x23\xdd\xb0\xeb\xb5\x7c\x68\xac\x3e\x46\xce\x26\x2c\x0b\x39\xaa\xff\xfb\xac\xf6\x81\x10\x5c\x8c\x3f\x6d\x38\x03\x47\x90\xe8\xd5\x14\xd2\xdd\xa4\xe8\x55\x8e\xf3\x80\x90\x77\x95\xcb\x9c\x4d\x9c\x03\x01\xa4\x86\x81\xb0\xbf\xf9\xe2\x59\xf3\x90\x4e\xaf\xf7\xe6\xd5\x25\xd9\xf7\x10\x03\xc4\x7c\x46\x03\x12\xca\x5a\xab\x93\xac\xc7\x7f\x25\x6f\xeb\x8f\xde\xdb\x26\x7c\x7d\x8c\xbb\x6f\xff\x04\x00\x00\xff\xff\xc1\x3e\x46\xf1\xaf\x03\x00\x00")

func templatesHtmlSubscribeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSubscribeHtml,
		"templates/html/subscribe.html",
	)
}

func templatesHtmlSubscribeHtml() (*asset, error) {
	bytes, err := templatesHtmlSubscribeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/subscribe.html", size: 943, mode: os.FileMode(420), modTime: time.Unix(1568295795, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSubscribe_confirmHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\x31\x0e\xc2\x30\x0c\x46\xe1\x3d\xa7\xb0\xba\xb0\xc1\x05\xaa\x5e\x83\xb1\x4a\x93\x3f\x22\x52\x6d\x47\x89\x61\xb1\x72\x77\x84\x58\x18\x98\x9f\xde\xe7\x4e\x19\xa5\x0a\x68\x19\xcf\x63\xa4\x5e\x0f\xec\x49\xa5\xd4\xce\xd1\xaa\xca\x32\x67\x70\x37\x70\x3b\xa3\x81\x96\xa4\xcc\x2a\xfb\x03\x31\xa3\x7f\x62\x58\xdb\x76\xc7\xe5\x05\x1a\x10\xa3\x48\xbf\x37\x81\x63\x3d\xaf\xeb\xad\x6d\xe1\x1f\x53\x54\xed\xcb\xb8\x13\x24\xd3\x9c\xe1\x1d\x00\x00\xff\xff\xd3\xb5\x2d\xd4\x93\x00\x00\x00")

func templatesHtmlSubscribe_confirmHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSubscribe_confirmHtml,
		"templates/html/subscribe_confirm.html",
	)
}

func templatesHtmlSubscribe_confirmHtml() (*asset, error) {
	bytes, err := templatesHtmlSubscribe_confirmHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/subscribe_confirm.html", size: 147, mode: os.FileMode(420), modTime: time.Unix(1567952005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSuccessHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xc9\x31\x0a\xc0\x20\x0c\x05\xd0\xdd\x53\x04\x2f\x26\xa2\x5f\x2a\x34\x49\xd1\x74\x0a\xb9\x7b\xa1\xd0\xb1\xf3\x73\xa7\x8e\x31\x05\x94\x9b\xca\x98\x8b\xcb\xbe\x5b\xc3\xde\x39\x22\xb9\x1b\xf8\x3a\xab\xbd\xcc\xac\x52\x0e\xd4\x8e\xf5\x83\x43\xd5\x3e\x24\x48\xa7\x88\xf4\x04\x00\x00\xff\xff\xe9\xd5\x22\x89\x62\x00\x00\x00")

func templatesHtmlSuccessHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSuccessHtml,
		"templates/html/success.html",
	)
}

func templatesHtmlSuccessHtml() (*asset, error) {
	bytes, err := templatesHtmlSuccessHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/success.html", size: 98, mode: os.FileMode(420), modTime: time.Unix(1560917570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlUnsubscribeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x41\x6f\xdc\x2c\x10\x3d\xdb\xbf\x62\xc4\xe5\x3b\x79\x2d\xe5\x8c\xb9\x45\xfa\x2a\x55\x6a\xd4\x24\x87\x9e\x2a\x6c\xc6\x01\x15\x18\x0b\xc6\x69\x57\xd6\xfe\xf7\x0a\xdb\x9b\x78\xab\xbd\xb0\x6b\xe6\xcd\x7b\x8f\xe1\xb1\x2c\x60\x70\x74\x11\x41\xcc\x31\xcf\x7d\x1e\x92\xeb\x51\x5c\x2e\xf5\xb2\x30\x86\xc9\x6b\x46\x10\x03\x85\x40\xf1\xa7\x45\x6d\x30\x95\x62\x2d\x8d\x7b\x87\xc1\xeb\x9c\x3b\x31\xe8\x64\x84\xaa\x01\x00\xa4\x7d\x38\xee\x36\x7b\x87\x7a\xfd\xe4\x96\xad\x7d\xd8\xc1\xff\x70\x34\x3d\x99\xb3\x50\x75\x5d\x2d\x0b\xb8\x11\x4e\x8f\x29\x51\x82\x22\x57\x1d\xb1\xda\x63\x62\x58\xd7\xc6\xe8\xf8\x86\x49\x40\x22\x8f\x7b\x45\xa8\xba\x2a\xf4\xcb\x72\x60\xa8\x64\x6b\xdc\xbb\x5a\xa9\x31\x9a\xb2\x55\x30\x75\x25\x47\x4a\xe1\xca\x5c\xfe\x0b\x08\xc8\x96\x4c\x27\x9e\xbe\x3d\xbf\x08\xd0\x03\x3b\x8a\x9d\x28\x74\xaf\xdf\xbf\xc2\xe5\x72\x15\xd8\xd6\xa3\xb3\xd2\xdf\xbc\x25\x9a\xa7\x82\xa9\xa4\xd7\x3d\x7a\x18\x29\x75\x42\x1b\x93\x30\x67\xa1\x1e\x83\x76\x1e\xf6\x4f\xd9\xae\x90\x15\xec\xe2\x34\x33\xf0\x79\xc2\x4e\x60\x01\x89\x1b\xda\x81\x22\x27\xf2\x02\x9c\xf9\x64\x03\x9d\x9c\x6e\x0c\x6e\xa3\x35\xfd\x79\x6f\xfd\x1f\xfd\x24\x60\xf2\x7a\x40\x4b\xde\x60\xea\xc4\x0f\x9a\x13\xe0\x51\x7c\xf3\x98\x83\xf6\x7e\x25\x3d\x74\x1e\x85\x19\xff\x30\x94\xa5\x09\x33\xa3\x11\xea\xc5\xba\x0c\x2e\x03\x5b\xbc\x25\x84\x33\xcd\xf0\x71\xd1\x06\x98\x56\x4c\x81\xb8\xf8\x06\xde\x65\x86\xdf\x8e\xed\x49\xb6\xab\xea\x3e\xc7\xeb\xd5\x1c\x66\xda\xcf\xcc\x14\xf7\x61\xe4\xb9\x0f\x8e\x3f\x4c\xf5\x1c\xa1\xe7\xd8\x4c\xc9\x05\x9d\xce\x42\x3d\xaf\x75\xd9\x6e\x4d\x1f\x44\xb2\x2d\xf6\xf7\xa8\x6d\x12\x6b\xe1\x6e\xf4\x46\x22\x2e\x41\xad\x2b\x39\xa9\x2f\x63\x39\xc9\x7f\x09\xc1\x13\xfd\x2a\xd6\x99\x40\x62\x50\x87\x10\x63\x50\x77\xcf\xc7\x16\x23\x48\x0d\x36\xe1\xb8\x85\xe6\x49\xb3\xcd\xa7\xe7\x6b\xeb\x1a\xa0\xf2\x2e\x80\x22\xd0\x3b\x26\xb0\x98\x50\xb6\x5a\x9d\x64\x3b\xdd\xd8\xdd\x7f\xee\x3d\xc5\xdd\xef\xfa\x4e\xaf\x81\xfe\x1b\x00\x00\xff\xff\xe3\x75\x0b\x74\xcc\x03\x00\x00")

func templatesHtmlUnsubscribeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlUnsubscribeHtml,
		"templates/html/unsubscribe.html",
	)
}

func templatesHtmlUnsubscribeHtml() (*asset, error) {
	bytes, err := templatesHtmlUnsubscribeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/unsubscribe.html", size: 972, mode: os.FileMode(420), modTime: time.Unix(1568295839, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlUnsubscribe_confirmHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\x31\x0e\xc3\x20\x0c\x46\xe1\x9d\x53\x58\x2c\xdd\xda\x0b\x44\xb9\x46\xc7\x88\xc0\x8f\x8a\x14\x6c\x04\x4e\x17\x8b\xbb\x57\x55\x97\x0e\x99\x9f\xde\x67\x46\x09\xb9\x30\xc8\x9f\x3c\xce\x7d\xc4\x5e\x76\x6c\x51\x38\x97\x5e\x83\x16\x61\x3f\xa7\x33\x53\xd4\x76\x04\x05\xf9\x28\xb5\x0a\x6f\x2f\x84\x84\xfe\x8d\x6e\x69\xeb\x13\xb7\x37\x68\x80\x95\x02\xfd\xdf\x84\x1a\xca\x71\x5f\x1e\x6d\x75\x57\x4c\x16\xd1\x1f\x63\x46\xe0\x44\x73\xba\x4f\x00\x00\x00\xff\xff\xb3\x49\xe6\xb3\x95\x00\x00\x00")

func templatesHtmlUnsubscribe_confirmHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlUnsubscribe_confirmHtml,
		"templates/html/unsubscribe_confirm.html",
	)
}

func templatesHtmlUnsubscribe_confirmHtml() (*asset, error) {
	bytes, err := templatesHtmlUnsubscribe_confirmHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/unsubscribe_confirm.html", size: 149, mode: os.FileMode(420), modTime: time.Unix(1567952223, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/common_footer.html": templatesHtmlCommon_footerHtml,
	"templates/html/common_header.html": templatesHtmlCommon_headerHtml,
	"templates/html/confirm.html": templatesHtmlConfirmHtml,
	"templates/html/confirm_update.html": templatesHtmlConfirm_updateHtml,
	"templates/html/email_confirmation.html": templatesHtmlEmail_confirmationHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
	"templates/html/subscribe.html": templatesHtmlSubscribeHtml,
	"templates/html/subscribe_confirm.html": templatesHtmlSubscribe_confirmHtml,
	"templates/html/success.html": templatesHtmlSuccessHtml,
	"templates/html/unsubscribe.html": templatesHtmlUnsubscribeHtml,
	"templates/html/unsubscribe_confirm.html": templatesHtmlUnsubscribe_confirmHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"common_footer.html": &bintree{templatesHtmlCommon_footerHtml, map[string]*bintree{}},
			"common_header.html": &bintree{templatesHtmlCommon_headerHtml, map[string]*bintree{}},
			"confirm.html": &bintree{templatesHtmlConfirmHtml, map[string]*bintree{}},
			"confirm_update.html": &bintree{templatesHtmlConfirm_updateHtml, map[string]*bintree{}},
			"email_confirmation.html": &bintree{templatesHtmlEmail_confirmationHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
			"subscribe.html": &bintree{templatesHtmlSubscribeHtml, map[string]*bintree{}},
			"subscribe_confirm.html": &bintree{templatesHtmlSubscribe_confirmHtml, map[string]*bintree{}},
			"success.html": &bintree{templatesHtmlSuccessHtml, map[string]*bintree{}},
			"unsubscribe.html": &bintree{templatesHtmlUnsubscribeHtml, map[string]*bintree{}},
			"unsubscribe_confirm.html": &bintree{templatesHtmlUnsubscribe_confirmHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

